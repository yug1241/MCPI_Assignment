
day4_demo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000404  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800058c  0800058c  0000158c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a4  080005a4  000015a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005a8  080005a8  000015a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005ac  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c0f  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000372  00000000  00000000  00002c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018036  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ffe  00000000  00000000  0001b132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8b8  00000000  00000000  0001c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a79e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001c4  00000000  00000000  000a7a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  000a7c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000574 	.word	0x08000574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000574 	.word	0x08000574

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LcdBusyWait>:
 *      Author: Nilesh
 */

#include "lcd.h"

void LcdBusyWait(void) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	uint32_t state;
	// make D7/BF pin as input
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)|BV(LCD_BF*2+1));
 800021e:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <LcdBusyWait+0x48>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0f      	ldr	r2, [pc, #60]	@ (8000260 <LcdBusyWait+0x48>)
 8000224:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000228:	6013      	str	r3, [r2, #0]
	// set RS=0, RW=1, EN=1
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 800022a:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <LcdBusyWait+0x48>)
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <LcdBusyWait+0x4c>)
 800022e:	619a      	str	r2, [r3, #24]
	// read data
	do {
		state = LCD_DATA_GPIO->IDR;
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <LcdBusyWait+0x48>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	607b      	str	r3, [r7, #4]
	} while((state & BV(LCD_BF)) != 0); // repeat if BF=1
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f003 0308 	and.w	r3, r3, #8
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f7      	bne.n	8000230 <LcdBusyWait+0x18>
	// set RW=0, EN=0
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <LcdBusyWait+0x48>)
 8000242:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000246:	619a      	str	r2, [r3, #24]
	// make D7/BF pin as output
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <LcdBusyWait+0x48>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <LcdBusyWait+0x48>)
 800024e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000252:	6013      	str	r3, [r2, #0]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40020c00 	.word	0x40020c00
 8000264:	002000c0 	.word	0x002000c0

08000268 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t val) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	460a      	mov	r2, r1
 8000272:	71fb      	strb	r3, [r7, #7]
 8000274:	4613      	mov	r3, r2
 8000276:	71bb      	strb	r3, [r7, #6]
	// set RS, RW = 0
	if(rs == LCD_CMD) // RS = 0
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d104      	bne.n	8000288 <LcdWriteNibble+0x20>
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 800027e:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <LcdWriteNibble+0x5c>)
 8000280:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000284:	619a      	str	r2, [r3, #24]
 8000286:	e002      	b.n	800028e <LcdWriteNibble+0x26>
	else // RS = 1
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <LcdWriteNibble+0x5c>)
 800028a:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <LcdWriteNibble+0x60>)
 800028c:	619a      	str	r2, [r3, #24]
	// write data (4-bits)
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <LcdWriteNibble+0x5c>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <LcdWriteNibble+0x5c>)
 8000294:	f023 030f 	bic.w	r3, r3, #15
 8000298:	6153      	str	r3, [r2, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 800029a:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <LcdWriteNibble+0x5c>)
 800029c:	695a      	ldr	r2, [r3, #20]
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	4908      	ldr	r1, [pc, #32]	@ (80002c4 <LcdWriteNibble+0x5c>)
 80002a2:	4313      	orrs	r3, r2
 80002a4:	614b      	str	r3, [r1, #20]
	// falling edge on EN
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002a6:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <LcdWriteNibble+0x5c>)
 80002a8:	2280      	movs	r2, #128	@ 0x80
 80002aa:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f7ff ff8b 	bl	80001c8 <DelayMs>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002b2:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <LcdWriteNibble+0x5c>)
 80002b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002b8:	619a      	str	r2, [r3, #24]
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40020c00 	.word	0x40020c00
 80002c8:	00400020 	.word	0x00400020

080002cc <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	091b      	lsrs	r3, r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	f003 030f 	and.w	r3, r3, #15
 80002e8:	73bb      	strb	r3, [r7, #14]
	// write high nibble
	LcdWriteNibble(rs, high);
 80002ea:	7bfa      	ldrb	r2, [r7, #15]
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ffb9 	bl	8000268 <LcdWriteNibble>
	// write low nibble
	LcdWriteNibble(rs, low);
 80002f6:	7bba      	ldrb	r2, [r7, #14]
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffb3 	bl	8000268 <LcdWriteNibble>
	// wait for busy flag
	LcdBusyWait();
 8000302:	f7ff ff89 	bl	8000218 <LcdBusyWait>
	DelayMs(3);
 8000306:	2003      	movs	r0, #3
 8000308:	f7ff ff5e 	bl	80001c8 <DelayMs>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <LcdInit>:

void LcdInit(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	DelayMs(50);
 8000318:	2032      	movs	r0, #50	@ 0x32
 800031a:	f7ff ff55 	bl	80001c8 <DelayMs>
	// enable lcd data port and ctrl port
	RCC->AHB1ENR |= BV(LCD_DATA_GPIO_EN);
 800031e:	4b34      	ldr	r3, [pc, #208]	@ (80003f0 <LcdInit+0xdc>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a33      	ldr	r2, [pc, #204]	@ (80003f0 <LcdInit+0xdc>)
 8000324:	f043 0308 	orr.w	r3, r3, #8
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_CTRL_GPIO_EN);
 800032a:	4b31      	ldr	r3, [pc, #196]	@ (80003f0 <LcdInit+0xdc>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032e:	4a30      	ldr	r2, [pc, #192]	@ (80003f0 <LcdInit+0xdc>)
 8000330:	f043 0308 	orr.w	r3, r3, #8
 8000334:	6313      	str	r3, [r2, #48]	@ 0x30

	//initialize lcd data pins (mode=output, speed=low, type=push-pull, no pull up/down)
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 8000336:	4b2f      	ldr	r3, [pc, #188]	@ (80003f4 <LcdInit+0xe0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a2e      	ldr	r2, [pc, #184]	@ (80003f4 <LcdInit+0xe0>)
 800033c:	f023 03aa 	bic.w	r3, r3, #170	@ 0xaa
 8000340:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 8000342:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <LcdInit+0xe0>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a2b      	ldr	r2, [pc, #172]	@ (80003f4 <LcdInit+0xe0>)
 8000348:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800034c:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 800034e:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <LcdInit+0xe0>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	4a28      	ldr	r2, [pc, #160]	@ (80003f4 <LcdInit+0xe0>)
 8000354:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000358:	6093      	str	r3, [r2, #8]
	LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 800035a:	4b26      	ldr	r3, [pc, #152]	@ (80003f4 <LcdInit+0xe0>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4a25      	ldr	r2, [pc, #148]	@ (80003f4 <LcdInit+0xe0>)
 8000360:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000364:	60d3      	str	r3, [r2, #12]
	LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000366:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <LcdInit+0xe0>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	4a22      	ldr	r2, [pc, #136]	@ (80003f4 <LcdInit+0xe0>)
 800036c:	f023 030f 	bic.w	r3, r3, #15
 8000370:	6053      	str	r3, [r2, #4]
	//clear lcd data pins
	LCD_DATA_GPIO->BSRR = (BV(LCD_D7_CLR) | BV(LCD_D6_CLR) | BV(LCD_D5_CLR) | BV(LCD_D4_CLR));
 8000372:	4b20      	ldr	r3, [pc, #128]	@ (80003f4 <LcdInit+0xe0>)
 8000374:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8000378:	619a      	str	r2, [r3, #24]

	//initialize lcd ctrl pins (mode=output, speed=low, type=push-pull, no pull up/down)
	LCD_CTRL_GPIO->MODER &= ~(BV(LCD_RS*2+1) | BV(LCD_RW*2+1) | BV(LCD_EN*2+1));
 800037a:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <LcdInit+0xe0>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a1d      	ldr	r2, [pc, #116]	@ (80003f4 <LcdInit+0xe0>)
 8000380:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 8000384:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->MODER |= BV(LCD_RS*2) | BV(LCD_RW*2) | BV(LCD_EN*2);
 8000386:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <LcdInit+0xe0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a1a      	ldr	r2, [pc, #104]	@ (80003f4 <LcdInit+0xe0>)
 800038c:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000390:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <LcdInit+0xe0>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	4a17      	ldr	r2, [pc, #92]	@ (80003f4 <LcdInit+0xe0>)
 8000398:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800039c:	6093      	str	r3, [r2, #8]
	LCD_CTRL_GPIO->PUPDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 800039e:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <LcdInit+0xe0>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	4a14      	ldr	r2, [pc, #80]	@ (80003f4 <LcdInit+0xe0>)
 80003a4:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80003a8:	60d3      	str	r3, [r2, #12]
	LCD_CTRL_GPIO->OTYPER &= ~(BV(LCD_RS) | BV(LCD_RW) | BV(LCD_EN));
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <LcdInit+0xe0>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	4a11      	ldr	r2, [pc, #68]	@ (80003f4 <LcdInit+0xe0>)
 80003b0:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80003b4:	6053      	str	r3, [r2, #4]

	//clear lcd ctrl pins
	LCD_CTRL_GPIO->BSRR = (BV(LCD_RS_CLR) | BV(LCD_RW_CLR) | BV(LCD_EN_CLR));
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <LcdInit+0xe0>)
 80003b8:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 80003bc:	619a      	str	r2, [r3, #24]

	DelayMs(200);
 80003be:	20c8      	movs	r0, #200	@ 0xc8
 80003c0:	f7ff ff02 	bl	80001c8 <DelayMs>
	// lcd initialization
	// 4-bit mode, 2-line, 5x8 font
	LcdWrite(LCD_CMD, LCD_FN_SET);
 80003c4:	2128      	movs	r1, #40	@ 0x28
 80003c6:	2000      	movs	r0, #0
 80003c8:	f7ff ff80 	bl	80002cc <LcdWrite>
	// display on, cursor on, blink on
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 80003cc:	210f      	movs	r1, #15
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff ff7c 	bl	80002cc <LcdWrite>
	// entry mode -- increment address
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 80003d4:	2106      	movs	r1, #6
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ff78 	bl	80002cc <LcdWrite>
	// clear display
	LcdWrite(LCD_CMD, LCD_CLEAR);
 80003dc:	2101      	movs	r1, #1
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff ff74 	bl	80002cc <LcdWrite>

	DelayMs(200);
 80003e4:	20c8      	movs	r0, #200	@ 0xc8
 80003e6:	f7ff feef 	bl	80001c8 <DelayMs>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020c00 	.word	0x40020c00

080003f8 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	6039      	str	r1, [r7, #0]
 8000402:	71fb      	strb	r3, [r7, #7]
	int i;
	// set lcd line address
	LcdWrite(LCD_CMD, line);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff ff5f 	bl	80002cc <LcdWrite>
	// send chars to lcd one by one
	for(i=0; str[i]!='\0'; i++)
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	e00a      	b.n	800042a <LcdPuts+0x32>
		LcdWrite(LCD_DATA, str[i]);
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	4413      	add	r3, r2
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff54 	bl	80002cc <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3301      	adds	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1ee      	bne.n	8000414 <LcdPuts+0x1c>
}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	SystemInit();
 8000444:	f000 f812 	bl	800046c <SystemInit>
	LcdInit();
 8000448:	f7ff ff64 	bl	8000314 <LcdInit>
	LcdPuts(LCD_LINE1, "Yugandhar");
 800044c:	4905      	ldr	r1, [pc, #20]	@ (8000464 <main+0x24>)
 800044e:	2080      	movs	r0, #128	@ 0x80
 8000450:	f7ff ffd2 	bl	80003f8 <LcdPuts>
	LcdPuts(LCD_LINE2, "Bhusawal");
 8000454:	4904      	ldr	r1, [pc, #16]	@ (8000468 <main+0x28>)
 8000456:	20c0      	movs	r0, #192	@ 0xc0
 8000458:	f7ff ffce 	bl	80003f8 <LcdPuts>
	return 0;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	0800058c 	.word	0x0800058c
 8000468:	08000598 	.word	0x08000598

0800046c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000470:	f000 f802 	bl	8000478 <DWT_Init>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <DWT_Init+0x58>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <DWT_Init+0x58>)
 8000482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000486:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <DWT_Init+0x58>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a10      	ldr	r2, [pc, #64]	@ (80004d0 <DWT_Init+0x58>)
 800048e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000492:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <DWT_Init+0x5c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <DWT_Init+0x5c>)
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <DWT_Init+0x5c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	@ (80004d4 <DWT_Init+0x5c>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <DWT_Init+0x5c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004b2:	bf00      	nop
    __ASM volatile ("NOP");
 80004b4:	bf00      	nop
    __ASM volatile ("NOP");
 80004b6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <DWT_Init+0x5c>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	bf0c      	ite	eq
 80004c0:	2301      	moveq	r3, #1
 80004c2:	2300      	movne	r3, #0
 80004c4:	b2db      	uxtb	r3, r3
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000edf0 	.word	0xe000edf0
 80004d4:	e0001000 	.word	0xe0001000

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004dc:	f7ff ffc6 	bl	800046c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	@ (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000506:	f000 f811 	bl	800052c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff ff99 	bl	8000440 <main>

0800050e <LoopForever>:

LoopForever:
  b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800051c:	080005ac 	.word	0x080005ac
  ldr r2, =_sbss
 8000520:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000524:	20000020 	.word	0x20000020

08000528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <__libc_init_array>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	4d0d      	ldr	r5, [pc, #52]	@ (8000564 <__libc_init_array+0x38>)
 8000530:	4c0d      	ldr	r4, [pc, #52]	@ (8000568 <__libc_init_array+0x3c>)
 8000532:	1b64      	subs	r4, r4, r5
 8000534:	10a4      	asrs	r4, r4, #2
 8000536:	2600      	movs	r6, #0
 8000538:	42a6      	cmp	r6, r4
 800053a:	d109      	bne.n	8000550 <__libc_init_array+0x24>
 800053c:	4d0b      	ldr	r5, [pc, #44]	@ (800056c <__libc_init_array+0x40>)
 800053e:	4c0c      	ldr	r4, [pc, #48]	@ (8000570 <__libc_init_array+0x44>)
 8000540:	f000 f818 	bl	8000574 <_init>
 8000544:	1b64      	subs	r4, r4, r5
 8000546:	10a4      	asrs	r4, r4, #2
 8000548:	2600      	movs	r6, #0
 800054a:	42a6      	cmp	r6, r4
 800054c:	d105      	bne.n	800055a <__libc_init_array+0x2e>
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	f855 3b04 	ldr.w	r3, [r5], #4
 8000554:	4798      	blx	r3
 8000556:	3601      	adds	r6, #1
 8000558:	e7ee      	b.n	8000538 <__libc_init_array+0xc>
 800055a:	f855 3b04 	ldr.w	r3, [r5], #4
 800055e:	4798      	blx	r3
 8000560:	3601      	adds	r6, #1
 8000562:	e7f2      	b.n	800054a <__libc_init_array+0x1e>
 8000564:	080005a4 	.word	0x080005a4
 8000568:	080005a4 	.word	0x080005a4
 800056c:	080005a4 	.word	0x080005a4
 8000570:	080005a8 	.word	0x080005a8

08000574 <_init>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr

08000580 <_fini>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr
