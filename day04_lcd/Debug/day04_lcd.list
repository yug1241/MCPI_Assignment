
day04_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000470  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000648  08000648  00001648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000660  08000660  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000660  08000660  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000660  08000660  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00001660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000664  08000664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000668  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000de6  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042e  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00003248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008a  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018042  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000104e  00000000  00000000  0001b3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8d2  00000000  00000000  0001c432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7d04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f0  00000000  00000000  000a7d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  000a7f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000630 	.word	0x08000630

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08000630 	.word	0x08000630

08000218 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <DelayMs+0x44>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000226:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <DelayMs+0x48>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a0e      	ldr	r2, [pc, #56]	@ (8000264 <DelayMs+0x4c>)
 800022c:	fba2 2303 	umull	r2, r3, r2, r3
 8000230:	099b      	lsrs	r3, r3, #6
 8000232:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	fb02 f303 	mul.w	r3, r2, r3
 800023c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800023e:	bf00      	nop
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <DelayMs+0x44>)
 8000242:	685a      	ldr	r2, [r3, #4]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	1ad2      	subs	r2, r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	429a      	cmp	r2, r3
 800024c:	d3f8      	bcc.n	8000240 <DelayMs+0x28>
}
 800024e:	bf00      	nop
 8000250:	bf00      	nop
 8000252:	3714      	adds	r7, #20
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e0001000 	.word	0xe0001000
 8000260:	20000000 	.word	0x20000000
 8000264:	10624dd3 	.word	0x10624dd3

08000268 <LcdBusyWait>:
 */


#include "lcd.h"

void LcdBusyWait(void){
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	uint32_t state;
	//make D7/BF pin as input
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)| BV(LCD_BF*2+1));
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <LcdBusyWait+0x40>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <LcdBusyWait+0x40>)
 8000274:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000278:	6013      	str	r3, [r2, #0]

	//set RS=0,RW=1,EN=1
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <LcdBusyWait+0x40>)
 800027c:	4a0b      	ldr	r2, [pc, #44]	@ (80002ac <LcdBusyWait+0x44>)
 800027e:	619a      	str	r2, [r3, #24]

	//read data
	do{
		state=LCD_DATA_GPIO->IDR;
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <LcdBusyWait+0x40>)
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	607b      	str	r3, [r7, #4]
	}while((state & BV(LCD_BF)) !=0);//REPATIF BF=1
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1f7      	bne.n	8000280 <LcdBusyWait+0x18>

	//set RW=0, EN=0

	LCD_CTRL_GPIO->MODER |= BV(LCD_BF*2);
 8000290:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <LcdBusyWait+0x40>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <LcdBusyWait+0x40>)
 8000296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40020c00 	.word	0x40020c00
 80002ac:	002000c0 	.word	0x002000c0

080002b0 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t val){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	460a      	mov	r2, r1
 80002ba:	71fb      	strb	r3, [r7, #7]
 80002bc:	4613      	mov	r3, r2
 80002be:	71bb      	strb	r3, [r7, #6]
	//set RS,RW =0

     if(rs == LCD_CMD)//RS =0
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <LcdWriteNibble+0x20>
    	 LCD_CTRL_GPIO->BSRR =BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 80002c6:	4b11      	ldr	r3, [pc, #68]	@ (800030c <LcdWriteNibble+0x5c>)
 80002c8:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80002cc:	619a      	str	r2, [r3, #24]
 80002ce:	e002      	b.n	80002d6 <LcdWriteNibble+0x26>
     else // RS=1
    	 LCD_CTRL_GPIO->BSRR = BV(LCD_RS) |BV(LCD_RW_CLR);
 80002d0:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <LcdWriteNibble+0x5c>)
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <LcdWriteNibble+0x60>)
 80002d4:	619a      	str	r2, [r3, #24]

	//write data (4-bits)
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <LcdWriteNibble+0x5c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a0c      	ldr	r2, [pc, #48]	@ (800030c <LcdWriteNibble+0x5c>)
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	6153      	str	r3, [r2, #20]
	LCD_CTRL_GPIO->ODR |= val << LCD_D4;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <LcdWriteNibble+0x5c>)
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	4908      	ldr	r1, [pc, #32]	@ (800030c <LcdWriteNibble+0x5c>)
 80002ea:	4313      	orrs	r3, r2
 80002ec:	614b      	str	r3, [r1, #20]
	//falling edge on EN
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <LcdWriteNibble+0x5c>)
 80002f0:	2280      	movs	r2, #128	@ 0x80
 80002f2:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f7ff ff8f 	bl	8000218 <DelayMs>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002fa:	4b04      	ldr	r3, [pc, #16]	@ (800030c <LcdWriteNibble+0x5c>)
 80002fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000300:	619a      	str	r2, [r3, #24]
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40020c00 	.word	0x40020c00
 8000310:	00400020 	.word	0x00400020

08000314 <LcdWrite>:


void LcdWrite(uint8_t rs,uint8_t val){
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	460a      	mov	r2, r1
 800031e:	71fb      	strb	r3, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4,low =val & 0x0F;
 8000324:	79bb      	ldrb	r3, [r7, #6]
 8000326:	091b      	lsrs	r3, r3, #4
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	f003 030f 	and.w	r3, r3, #15
 8000330:	73bb      	strb	r3, [r7, #14]
	//write high nibble
	LcdWriteNibble(rs,high);
 8000332:	7bfa      	ldrb	r2, [r7, #15]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4611      	mov	r1, r2
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ffb9 	bl	80002b0 <LcdWriteNibble>
	//write low nibble
	LcdWriteNibble(rs,low);
 800033e:	7bba      	ldrb	r2, [r7, #14]
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4611      	mov	r1, r2
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffb3 	bl	80002b0 <LcdWriteNibble>
	//wait for busy flag
	LcdBusyWait();
 800034a:	f7ff ff8d 	bl	8000268 <LcdBusyWait>
	DelayMs(3);
 800034e:	2003      	movs	r0, #3
 8000350:	f7ff ff62 	bl	8000218 <DelayMs>
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <LcdInit>:




void LcdInit(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	DelayMs(50);
 8000360:	2032      	movs	r0, #50	@ 0x32
 8000362:	f7ff ff59 	bl	8000218 <DelayMs>
	//enable lcd data port and ctrl port
	RCC->AHB1ENR |= BV(LCD_DATA_GPIO_EN);
 8000366:	4b36      	ldr	r3, [pc, #216]	@ (8000440 <LcdInit+0xe4>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a35      	ldr	r2, [pc, #212]	@ (8000440 <LcdInit+0xe4>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_CTRL_GPIO_EN);
 8000372:	4b33      	ldr	r3, [pc, #204]	@ (8000440 <LcdInit+0xe4>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	4a32      	ldr	r2, [pc, #200]	@ (8000440 <LcdInit+0xe4>)
 8000378:	f043 0308 	orr.w	r3, r3, #8
 800037c:	6313      	str	r3, [r2, #48]	@ 0x30

	//initialize lcd data pins (mode=output, speed=low, type=push-pull, no pull up/down)
		LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 800037e:	4b31      	ldr	r3, [pc, #196]	@ (8000444 <LcdInit+0xe8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a30      	ldr	r2, [pc, #192]	@ (8000444 <LcdInit+0xe8>)
 8000384:	f023 03aa 	bic.w	r3, r3, #170	@ 0xaa
 8000388:	6013      	str	r3, [r2, #0]
		LCD_DATA_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 800038a:	4b2e      	ldr	r3, [pc, #184]	@ (8000444 <LcdInit+0xe8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a2d      	ldr	r2, [pc, #180]	@ (8000444 <LcdInit+0xe8>)
 8000390:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000394:	6013      	str	r3, [r2, #0]
		LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 8000396:	4b2b      	ldr	r3, [pc, #172]	@ (8000444 <LcdInit+0xe8>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a2a      	ldr	r2, [pc, #168]	@ (8000444 <LcdInit+0xe8>)
 800039c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80003a0:	6093      	str	r3, [r2, #8]
		LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 80003a2:	4b28      	ldr	r3, [pc, #160]	@ (8000444 <LcdInit+0xe8>)
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	4a27      	ldr	r2, [pc, #156]	@ (8000444 <LcdInit+0xe8>)
 80003a8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80003ac:	60d3      	str	r3, [r2, #12]
		LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 80003ae:	4b25      	ldr	r3, [pc, #148]	@ (8000444 <LcdInit+0xe8>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	4a24      	ldr	r2, [pc, #144]	@ (8000444 <LcdInit+0xe8>)
 80003b4:	f023 030f 	bic.w	r3, r3, #15
 80003b8:	6053      	str	r3, [r2, #4]
		//clear lcd data pins
		LCD_DATA_GPIO->BSRR = (BV(LCD_D7_CLR) | BV(LCD_D6_CLR) | BV(LCD_D5_CLR) | BV(LCD_D4_CLR));
 80003ba:	4b22      	ldr	r3, [pc, #136]	@ (8000444 <LcdInit+0xe8>)
 80003bc:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 80003c0:	619a      	str	r2, [r3, #24]

		//initialize lcd ctrl pins (mode=output, speed=low, type=push-pull, no pull up/down)
		LCD_CTRL_GPIO->MODER &= ~(BV(LCD_RS*2+1) | BV(LCD_RW*2+1) | BV(LCD_EN*2+1));
 80003c2:	4b20      	ldr	r3, [pc, #128]	@ (8000444 <LcdInit+0xe8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000444 <LcdInit+0xe8>)
 80003c8:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 80003cc:	6013      	str	r3, [r2, #0]
		LCD_CTRL_GPIO->MODER |= BV(LCD_RS*2) | BV(LCD_RW*2) | BV(LCD_EN*2);
 80003ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000444 <LcdInit+0xe8>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000444 <LcdInit+0xe8>)
 80003d4:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80003d8:	6013      	str	r3, [r2, #0]
		LCD_CTRL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 80003da:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <LcdInit+0xe8>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a19      	ldr	r2, [pc, #100]	@ (8000444 <LcdInit+0xe8>)
 80003e0:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80003e4:	6093      	str	r3, [r2, #8]
		LCD_CTRL_GPIO->PUPDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 80003e6:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <LcdInit+0xe8>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a16      	ldr	r2, [pc, #88]	@ (8000444 <LcdInit+0xe8>)
 80003ec:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80003f0:	60d3      	str	r3, [r2, #12]
		LCD_CTRL_GPIO->OTYPER &= ~(BV(LCD_RS) | BV(LCD_RW) | BV(LCD_EN));
 80003f2:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <LcdInit+0xe8>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	4a13      	ldr	r2, [pc, #76]	@ (8000444 <LcdInit+0xe8>)
 80003f8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80003fc:	6053      	str	r3, [r2, #4]

		//clear lcd ctrl pins
		LCD_CTRL_GPIO->BSRR = (BV(LCD_RS_CLR) | BV(LCD_RW_CLR) | BV(LCD_EN_CLR));
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <LcdInit+0xe8>)
 8000400:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 8000404:	619a      	str	r2, [r3, #24]

		DelayMs(200);
 8000406:	20c8      	movs	r0, #200	@ 0xc8
 8000408:	f7ff ff06 	bl	8000218 <DelayMs>
		// lcd initialization
		// 4-bit mode, 2-line, 5x8 font
		LcdWrite(LCD_CMD, LCD_FN_SET);
 800040c:	2128      	movs	r1, #40	@ 0x28
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff ff80 	bl	8000314 <LcdWrite>
		// display on, cursor on, blink on
		LcdWrite(LCD_CMD, LCD_DISP_ON);
 8000414:	210f      	movs	r1, #15
 8000416:	2000      	movs	r0, #0
 8000418:	f7ff ff7c 	bl	8000314 <LcdWrite>
		// entry mode -- increment address
		LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 800041c:	2106      	movs	r1, #6
 800041e:	2000      	movs	r0, #0
 8000420:	f7ff ff78 	bl	8000314 <LcdWrite>
		// clear display
		LcdWrite(LCD_CMD, LCD_CLEAR);
 8000424:	2101      	movs	r1, #1
 8000426:	2000      	movs	r0, #0
 8000428:	f7ff ff74 	bl	8000314 <LcdWrite>
		LcdWrite(LCD_CMD, LCD_LINE_SHIFT);
 800042c:	211c      	movs	r1, #28
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff ff70 	bl	8000314 <LcdWrite>


		DelayMs(1000);
 8000434:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000438:	f7ff feee 	bl	8000218 <DelayMs>
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40023800 	.word	0x40023800
 8000444:	40020c00 	.word	0x40020c00

08000448 <LcdPuts>:

	void LcdPuts(uint8_t line, char str[]) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
		int i;
		// set lcd line address
		LcdWrite(LCD_CMD, line);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	4619      	mov	r1, r3
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ff5b 	bl	8000314 <LcdWrite>
		// send chars to lcd one by one
		for(i=0; str[i]!='\0'; i++)
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	e00a      	b.n	800047a <LcdPuts+0x32>
			LcdWrite(LCD_DATA, str[i]);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	4413      	add	r3, r2
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff ff50 	bl	8000314 <LcdWrite>
		for(i=0; str[i]!='\0'; i++)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3301      	adds	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	683a      	ldr	r2, [r7, #0]
 800047e:	4413      	add	r3, r2
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1ee      	bne.n	8000464 <LcdPuts+0x1c>

	}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <DelayMs+0x44>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <DelayMs+0x48>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <DelayMs+0x4c>)
 80004a4:	fba2 2303 	umull	r2, r3, r2, r3
 80004a8:	099b      	lsrs	r3, r3, #6
 80004aa:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004b6:	bf00      	nop
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <DelayMs+0x44>)
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	1ad2      	subs	r2, r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3f8      	bcc.n	80004b8 <DelayMs+0x28>
}
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e0001000 	.word	0xe0001000
 80004d8:	20000000 	.word	0x20000000
 80004dc:	10624dd3 	.word	0x10624dd3

080004e0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
	SystemInit();
 80004e6:	f000 f81f 	bl	8000528 <SystemInit>
	LcdInit();
 80004ea:	f7ff ff37 	bl	800035c <LcdInit>


	LcdPuts(LCD_LINE1,"YUGANDHAR");
 80004ee:	490c      	ldr	r1, [pc, #48]	@ (8000520 <main+0x40>)
 80004f0:	2080      	movs	r0, #128	@ 0x80
 80004f2:	f7ff ffa9 	bl	8000448 <LcdPuts>

	LcdPuts(LCD_LINE2,"NARKHEDE");
 80004f6:	490b      	ldr	r1, [pc, #44]	@ (8000524 <main+0x44>)
 80004f8:	20c0      	movs	r0, #192	@ 0xc0
 80004fa:	f7ff ffa5 	bl	8000448 <LcdPuts>

	{
	while(1)
	{
		for(int i=0;i<=16;i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	e006      	b.n	8000512 <main+0x32>
		LcdWrite(LCD_CMD, LCD_LINE_SHIFT);
 8000504:	211c      	movs	r1, #28
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff04 	bl	8000314 <LcdWrite>
		for(int i=0;i<=16;i++)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3301      	adds	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b10      	cmp	r3, #16
 8000516:	ddf5      	ble.n	8000504 <main+0x24>

		DelayMs(200);
 8000518:	20c8      	movs	r0, #200	@ 0xc8
 800051a:	f7ff ffb9 	bl	8000490 <DelayMs>
		for(int i=0;i<=16;i++)
 800051e:	e7ee      	b.n	80004fe <main+0x1e>
 8000520:	08000648 	.word	0x08000648
 8000524:	08000654 	.word	0x08000654

08000528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  DWT_Init();
 800052c:	f000 f802 	bl	8000534 <DWT_Init>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <DWT_Init+0x58>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <DWT_Init+0x58>)
 800053e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000542:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <DWT_Init+0x58>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a10      	ldr	r2, [pc, #64]	@ (800058c <DWT_Init+0x58>)
 800054a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800054e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <DWT_Init+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <DWT_Init+0x5c>)
 8000556:	f023 0301 	bic.w	r3, r3, #1
 800055a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <DWT_Init+0x5c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0b      	ldr	r2, [pc, #44]	@ (8000590 <DWT_Init+0x5c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <DWT_Init+0x5c>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800056e:	bf00      	nop
    __ASM volatile ("NOP");
 8000570:	bf00      	nop
    __ASM volatile ("NOP");
 8000572:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <DWT_Init+0x5c>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf0c      	ite	eq
 800057c:	2301      	moveq	r3, #1
 800057e:	2300      	movne	r3, #0
 8000580:	b2db      	uxtb	r3, r3
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000edf0 	.word	0xe000edf0
 8000590:	e0001000 	.word	0xe0001000

08000594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000596:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000598:	f7ff ffc6 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490d      	ldr	r1, [pc, #52]	@ (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0a      	ldr	r4, [pc, #40]	@ (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c2:	f000 f811 	bl	80005e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff ff8b 	bl	80004e0 <main>

080005ca <LoopForever>:

LoopForever:
  b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   r0, =_estack
 80005cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005d8:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 80005dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005e0:	20000020 	.word	0x20000020

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>
	...

080005e8 <__libc_init_array>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000620 <__libc_init_array+0x38>)
 80005ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000624 <__libc_init_array+0x3c>)
 80005ee:	1b64      	subs	r4, r4, r5
 80005f0:	10a4      	asrs	r4, r4, #2
 80005f2:	2600      	movs	r6, #0
 80005f4:	42a6      	cmp	r6, r4
 80005f6:	d109      	bne.n	800060c <__libc_init_array+0x24>
 80005f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000628 <__libc_init_array+0x40>)
 80005fa:	4c0c      	ldr	r4, [pc, #48]	@ (800062c <__libc_init_array+0x44>)
 80005fc:	f000 f818 	bl	8000630 <_init>
 8000600:	1b64      	subs	r4, r4, r5
 8000602:	10a4      	asrs	r4, r4, #2
 8000604:	2600      	movs	r6, #0
 8000606:	42a6      	cmp	r6, r4
 8000608:	d105      	bne.n	8000616 <__libc_init_array+0x2e>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000610:	4798      	blx	r3
 8000612:	3601      	adds	r6, #1
 8000614:	e7ee      	b.n	80005f4 <__libc_init_array+0xc>
 8000616:	f855 3b04 	ldr.w	r3, [r5], #4
 800061a:	4798      	blx	r3
 800061c:	3601      	adds	r6, #1
 800061e:	e7f2      	b.n	8000606 <__libc_init_array+0x1e>
 8000620:	08000660 	.word	0x08000660
 8000624:	08000660 	.word	0x08000660
 8000628:	08000660 	.word	0x08000660
 800062c:	08000664 	.word	0x08000664

08000630 <_init>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr

0800063c <_fini>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr
