
day03_assign2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000514  08000514  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000514  08000514  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000514  08000514  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000514  08000514  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000514  08000514  00001514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000518  08000518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800051c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d1c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d8  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00003128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018050  00000000  00000000  00003274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fbd  00000000  00000000  0001b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b77c  00000000  00000000  0001c281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a79fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001d8  00000000  00000000  000a7a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  000a7c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004fc 	.word	0x080004fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080004fc 	.word	0x080004fc

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LedInit>:


#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000220:	4b29      	ldr	r3, [pc, #164]	@ (80002c8 <LedInit+0xb0>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a28      	ldr	r2, [pc, #160]	@ (80002c8 <LedInit+0xb0>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 800022c:	4b27      	ldr	r3, [pc, #156]	@ (80002cc <LedInit+0xb4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	3201      	adds	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a22      	ldr	r2, [pc, #136]	@ (80002cc <LedInit+0xb4>)
 8000242:	400b      	ands	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 8000246:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <LedInit+0xb4>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a1d      	ldr	r2, [pc, #116]	@ (80002cc <LedInit+0xb4>)
 8000258:	430b      	orrs	r3, r1
 800025a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800025c:	4b1b      	ldr	r3, [pc, #108]	@ (80002cc <LedInit+0xb4>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	3201      	adds	r2, #1
 8000266:	2101      	movs	r1, #1
 8000268:	4091      	lsls	r1, r2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	0052      	lsls	r2, r2, #1
 800026e:	2001      	movs	r0, #1
 8000270:	fa00 f202 	lsl.w	r2, r0, r2
 8000274:	430a      	orrs	r2, r1
 8000276:	43d2      	mvns	r2, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a14      	ldr	r2, [pc, #80]	@ (80002cc <LedInit+0xb4>)
 800027c:	400b      	ands	r3, r1
 800027e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <LedInit+0xb4>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	0052      	lsls	r2, r2, #1
 8000288:	3201      	adds	r2, #1
 800028a:	2101      	movs	r1, #1
 800028c:	4091      	lsls	r1, r2
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	2001      	movs	r0, #1
 8000294:	fa00 f202 	lsl.w	r2, r0, r2
 8000298:	430a      	orrs	r2, r1
 800029a:	43d2      	mvns	r2, r2
 800029c:	4611      	mov	r1, r2
 800029e:	4a0b      	ldr	r2, [pc, #44]	@ (80002cc <LedInit+0xb4>)
 80002a0:	400b      	ands	r3, r1
 80002a2:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <LedInit+0xb4>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	2101      	movs	r1, #1
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a05      	ldr	r2, [pc, #20]	@ (80002cc <LedInit+0xb4>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	6053      	str	r3, [r2, #4]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <LedOn>:

void LedOn(uint32_t pin) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->BSRR |= BV(pin );
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <LedOn+0x28>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	2101      	movs	r1, #1
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <LedOn+0x28>)
 80002e8:	430b      	orrs	r3, r1
 80002ea:	6193      	str	r3, [r2, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40020c00 	.word	0x40020c00

080002fc <LedOff>:

void LedOff(uint32_t pin) {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->BSRR &= ~BV(pin );
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <LedOff+0x2c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	2101      	movs	r1, #1
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	43d2      	mvns	r2, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <LedOff+0x2c>)
 8000316:	400b      	ands	r3, r1
 8000318:	6193      	str	r3, [r2, #24]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40020c00 	.word	0x40020c00

0800032c <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delay) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f7ff ffca 	bl	80002d0 <LedOn>
	DelayMs(delay);
 800033c:	6838      	ldr	r0, [r7, #0]
 800033e:	f7ff ff43 	bl	80001c8 <DelayMs>
	LedOff(pin);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ffda 	bl	80002fc <LedOff>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <DelayMs+0x44>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <DelayMs+0x48>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a0e      	ldr	r2, [pc, #56]	@ (800039c <DelayMs+0x4c>)
 8000364:	fba2 2303 	umull	r2, r3, r2, r3
 8000368:	099b      	lsrs	r3, r3, #6
 800036a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	fb02 f303 	mul.w	r3, r2, r3
 8000374:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000376:	bf00      	nop
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <DelayMs+0x44>)
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	1ad2      	subs	r2, r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	429a      	cmp	r2, r3
 8000384:	d3f8      	bcc.n	8000378 <DelayMs+0x28>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e0001000 	.word	0xe0001000
 8000398:	20000000 	.word	0x20000000
 800039c:	10624dd3 	.word	0x10624dd3

080003a0 <main>:
#endif


//. Rewrite LED functions using BSRR register (instead of ODR register). On all LEDs for 500 ms and then Off all LEDs for 500 ms repeatedly.
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	SystemInit();
 80003a4:	f000 f826 	bl	80003f4 <SystemInit>
	DelayMs(1);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f7ff ffd1 	bl	8000350 <DelayMs>
	LedInit(LED_GREEN);
 80003ae:	200c      	movs	r0, #12
 80003b0:	f7ff ff32 	bl	8000218 <LedInit>
	LedInit(LED_ORANGE);
 80003b4:	200d      	movs	r0, #13
 80003b6:	f7ff ff2f 	bl	8000218 <LedInit>
	LedInit(LED_RED);
 80003ba:	200e      	movs	r0, #14
 80003bc:	f7ff ff2c 	bl	8000218 <LedInit>
	LedInit(LED_BLUE);
 80003c0:	200f      	movs	r0, #15
 80003c2:	f7ff ff29 	bl	8000218 <LedInit>
	while(1) {
		LedBlink(LED_GREEN, 500);
 80003c6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003ca:	200c      	movs	r0, #12
 80003cc:	f7ff ffae 	bl	800032c <LedBlink>
		LedBlink(LED_ORANGE, 500);
 80003d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003d4:	200d      	movs	r0, #13
 80003d6:	f7ff ffa9 	bl	800032c <LedBlink>
		LedBlink(LED_RED, 500);
 80003da:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003de:	200e      	movs	r0, #14
 80003e0:	f7ff ffa4 	bl	800032c <LedBlink>
		LedBlink(LED_BLUE, 500);
 80003e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003e8:	200f      	movs	r0, #15
 80003ea:	f7ff ff9f 	bl	800032c <LedBlink>
		LedBlink(LED_GREEN, 500);
 80003ee:	bf00      	nop
 80003f0:	e7e9      	b.n	80003c6 <main+0x26>
	...

080003f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  DWT_Init();
 80003f8:	f000 f802 	bl	8000400 <DWT_Init>
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}

08000400 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000404:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <DWT_Init+0x58>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a13      	ldr	r2, [pc, #76]	@ (8000458 <DWT_Init+0x58>)
 800040a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800040e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <DWT_Init+0x58>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a10      	ldr	r2, [pc, #64]	@ (8000458 <DWT_Init+0x58>)
 8000416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800041a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <DWT_Init+0x5c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0e      	ldr	r2, [pc, #56]	@ (800045c <DWT_Init+0x5c>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <DWT_Init+0x5c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0b      	ldr	r2, [pc, #44]	@ (800045c <DWT_Init+0x5c>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <DWT_Init+0x5c>)
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800043a:	bf00      	nop
    __ASM volatile ("NOP");
 800043c:	bf00      	nop
    __ASM volatile ("NOP");
 800043e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <DWT_Init+0x5c>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	2301      	moveq	r3, #1
 800044a:	2300      	movne	r3, #0
 800044c:	b2db      	uxtb	r3, r3
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	e000edf0 	.word	0xe000edf0
 800045c:	e0001000 	.word	0xe0001000

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	@ (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000464:	f7ff ffc6 	bl	80003f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	@ (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	@ (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	@ (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 f811 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff ff85 	bl	80003a0 <main>

08000496 <LoopForever>:

LoopForever:
  b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a4:	0800051c 	.word	0x0800051c
  ldr r2, =_sbss
 80004a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004ac:	20000020 	.word	0x20000020

080004b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC_IRQHandler>
	...

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	4d0d      	ldr	r5, [pc, #52]	@ (80004ec <__libc_init_array+0x38>)
 80004b8:	4c0d      	ldr	r4, [pc, #52]	@ (80004f0 <__libc_init_array+0x3c>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	2600      	movs	r6, #0
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	4d0b      	ldr	r5, [pc, #44]	@ (80004f4 <__libc_init_array+0x40>)
 80004c6:	4c0c      	ldr	r4, [pc, #48]	@ (80004f8 <__libc_init_array+0x44>)
 80004c8:	f000 f818 	bl	80004fc <_init>
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	2600      	movs	r6, #0
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000514 	.word	0x08000514
 80004f0:	08000514 	.word	0x08000514
 80004f4:	08000514 	.word	0x08000514
 80004f8:	08000518 	.word	0x08000518

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
